/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>


// TAP Dance macros taken from
// https://github.com/perryfranks/zmk_corne_prog_dvorak/blob/master/config/corne.keymap
// 
#define TD_TAB      &td0    // TAB ESC
#define TD_CAPLOCK  &td1    // LSHIFT CAPSLOCK 
#define TD_SPC      &td2    // SPACE ENTER 
#define TD_SLSH     &td3    // SLASH QMARK
#define TD_QUOTE    &td4    // QUOTE DOUBLE_QUOTES
#define TD_EQL      &td5    // EQUAL PLUS
#define TD_BSLS     &td6    // BACKSLASH PIPE 
#define TD_MINUS    &td7    // MINUS UNDERSCORE
#define TD_SCLN     &td8    // SEMICOLON COLON 
#define TD_COMM     &td9    // COMMA LESS_THAN 
#define TD_DOT      &td10   // PERIOD GREATER_THAN 
#define TD_BACKF    &td11   // GRAVE TILDE
#define TD_ALT      &td12   // LALT GUI
#define TD_ARR      &td13   // Q AT (@)
#define TD_ATCAT    &td14   // AT CARET 
#define TD_TAW      &td15   // TAB LWIN
#define TD_SCLOCK   &td16   // (S)LSHIFT CAPSLOCK (Sticky shift)

#define BASE 0
#define NAV 1
#define SYM 2
#define BT 3

// TAP_DANCE settings
#define TAP_SPEED 200


/ {
behaviors {  
        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp TAB>, <&kp ESC>;

            }; 
        td1: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_1"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp LSHIFT>, <&kp CAPSLOCK>;
            }; 
        td2: tap_dance_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_2"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp SPACE>, <&kp ENTER>;
            }; 
        td3: tap_dance_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_3"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp SLASH>, <&kp QMARK>;
            }; 
        td4: tap_dance_4 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_4"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp SINGLE_QUOTE>, <&kp DOUBLE_QUOTES>;
            }; 
        td5: tap_dance_5 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_5"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp EQUAL>, <&kp PLUS>;
            }; 
        td6: tap_dance_6 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_6"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp BACKSLASH>, <&kp PIPE>;
            }; 
        td7: tap_dance_7 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_7"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp MINUS>, <&kp UNDERSCORE>;
            }; 
        td8: tap_dance_8 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_8"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp SEMICOLON>, <&kp COLON>;
            }; 
        td9: tap_dance_9 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_9"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp COMMA>, <&kp LESS_THAN>;
            }; 
        td10: tap_dance_10 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_10"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp PERIOD>, <&kp GREATER_THAN>;
            }; 
        td11: tap_dance_11 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_11"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp GRAVE>, <&kp TILDE>;
            };            

        td12: tap_dance_12 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_12"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp LALT>, <&kp GUI>;
            };
        td13: tap_dance_13 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_13"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp Q>, <&kp AT>;
            };
        td14: tap_dance_14 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_14"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp AT>, <&kp CARET>;
            };
        td15: tap_dance_15 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_15"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp TAB>, <&kp LWIN>;
            };
        td16: tap_dance_16 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_16"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&sk LSHIFT>, <&kp CAPSLOCK>;
            }; 

        // create the shifts of dvorak 
        one_lbkt: one_lbkt{ 
                compatible = "zmk,behavior-mod-morph";
                label="ONE_LBKT";
                #binding-cells = <0>;
                bindings = <&kp N1>, <&kp LBKT>;  
                mods=<(MOD_LSFT|MOD_RSFT)>;
            }; 
        two_lbrc: two_lbrc {
                compatible = "zmk,behavior-mod-morph";
                label="TWO_LBRC";
                #binding-cells = <0>; 
                bindings = <&kp N2>,<&kp LBRC>;
                mods=<(MOD_LSFT|MOD_RSFT)>;
        };
        three_rbrc: three_rbrc {
                compatible = "zmk,behavior-mod-morph";
                label="THREE_RBRC";
                #binding-cells = <0>; 
                bindings = <&kp N3>,<&kp RBRC>;
                mods=<(MOD_LSFT|MOD_RSFT)>;
        };
        four_lpar: four_lpar {
                compatible = "zmk,behavior-mod-morph";
                label="FOUR_LPAR";
                #binding-cells = <0>; 
                bindings = <&kp N4>,<&kp LPAR>;
                mods=<(MOD_LSFT|MOD_RSFT)>;
        };
        five_equal: five_equal {
                compatible = "zmk,behavior-mod-morph";
                label="FIVE_EQUAL";
                #binding-cells = <0>; 
                bindings = <&kp N5>,<&kp EQUAL>;
                mods=<(MOD_LSFT|MOD_RSFT)>;
        };
        six_s: six_star { 
                compatible = "zmk,behavior-mod-morph";
                label="SIX_STAR";
                #binding-cells = <0>;
                bindings = <&kp N6>, <&kp STAR>;  
                mods=<(MOD_LSFT|MOD_RSFT)>;
            }; 
        seven_par: seven_paren {
                compatible = "zmk,behavior-mod-morph";
                label="SEVEN_PAR";
                #binding-cells = <0>; 
                bindings = <&kp N7>,<&kp RPAR>;
                mods=<(MOD_LSFT|MOD_RSFT)>;
        };
        eight_pl: eight_plus {
                compatible = "zmk,behavior-mod-morph";
                label="EIGHT_PLUS";
                #binding-cells = <0>; 
                bindings = <&kp N8>,<&kp PLUS>;
                mods=<(MOD_LSFT|MOD_RSFT)>;
        };
        nine_rbkt: nine_rbkt {
                compatible = "zmk,behavior-mod-morph";
                label="NINE_RBKT";
                #binding-cells = <0>; 
                bindings = <&kp N9>,<&kp RBKT>;
                mods=<(MOD_LSFT|MOD_RSFT)>;
        };
        zero_exlm: zero_exlm {
                compatible = "zmk,behavior-mod-morph";
                label="ZERO_EXLM";
                #binding-cells = <0>; 
                bindings = <&kp N0>,<&kp EXCL>;
                mods=<(MOD_LSFT|MOD_RSFT)>;
        };
    };


        // LAYERS
        conditional_layers {
                compatible = "zmk,conditional-layers";
                tri_layer {
                if-layers = <1 2>;
                then-layer = <3>;
                };
        };


        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -------------------------------------------------------------------------------------
// | TAB:ESC | ; : | , < | . > |  P  |  Y  |   |  F  |  G   |  C  |  R  |  L  |   BKSP    |
// | CTRL    | A   |  O  |  E  |  U  |  I  |   |  D  |  H   |  T  |  N  |  S  |    -      |
// | SHFT    | ' " | Q @ |  J  |  K  |  X  |   |  B  |  M   |  W  |  V  |  Z  | SHFT(RET) |
//                         | ALT | LWR | SPC | RSE  | ALT |
                        bindings = <
   TD_TAB    TD_SCLN  TD_COMM TD_DOT &kp P &kp Y   &kp F &kp G  &kp C &kp R &kp L &kp BSPC
   &kp LCTRL &kp A    &kp O   &kp E  &kp U &kp I   &kp D &kp H  &kp T &kp N &kp S &kp DEL
   TD_SCLOCK TD_QUOTE TD_ARR  &kp J  &kp K &kp X   &kp B &kp M  &kp W &kp V &kp Z &mt TD_TAW
                        TD_ALT  &mo 1 TD_SPC &mo 2  &kp RALT
                        >;
                };

                lower_layer {
// --------------------------------------------------------------------------------
// | ESC   |  1   |  2  |  3  |  4  |  5  |    |  6  |  7  |  8  |  9  |  0  |      |
// | F11   |  F1  |  F2 |  F3 |  F4 |  F5 |    | LFT | DWN |  UP | RGT |     |      |
// | SHFT  |  F6  |  F7 |  F8 |  F9 |  F10|    |HOME | PGDN| PGUP| END |     |      |
//                           |     |     |      |     |     |
                        bindings = <
   &trans  &one_lbkt    &two_lbrc &three_rbrc &four_lpar &five_equal &six_s    &seven_par  &eight_pl &nine_rbkt &zero_exlm   &trans
   &kp F11 &kp F1       &kp F2     &kp F3      &kp F4    &kp F5      &kp LEFT  &kp DOWN    &kp UP    &RIGHT     &trans       &trans
   &trans  &kp F6       &kp F7     &kp F8      &kp F9    &kp F10     &kp HOME  &kp PG_DN   &kp PG_UP &END       &trans       &trans
                                 &trans      &trans      &kp RET     &mo 3       &trans
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  ESC |  [  |  {  |  }  |  (  |  =  |     |  *  |  )  |  +  |  ]  |  !  | DEL  |
// | CTRL |  ~  |  %  |  `  | / ? | @ ^ |     |     |     |     |     |     |      |
// | SHFT |  $  |  &  |  #  | - _ | \ | |     |     |     |     |     |     |      |
//                    | GUI |     | SPC |     | ENT |     | ALT |
                        bindings = <
   &trans     &kp LBKT    &kp LBRC     &kp RBRC     &kp LPAR    &kp EQUAL       &kp STAR    &kp RPAR  &kp PLUS  &kp RBKT  &kp EXCL   &trans    
   &kp LCTRL  &kp TILDE   &kp PRCNT    &kp GRAVE    TD_SLSH     TD_ATCAT        &trans      &trans    &trans    &trans    &trans     &trans
   &trans     &kp DLLR    &kp AMPS     &kp HASH     TD_MINUS    TD_BSLS         &trans      &trans    &trans    &trans    &trans     &trans
                    	               &trans       &trans      &trans          &trans    &trans
                        >;
                };

                adjust_layer {
// -----------------------------------------------------------------------------------------
// | RGB BRI+ | RGB SAT+ | RGB HUE+ | RGB ANI+ |    | RGB TOG |   |  BT1  | BT2 | BT3 | BT4 | BT5 | BT CLR |
// | RGB BRI- | RGB SAT- | RGB HUE- | RGB ANI- |    |         |   |       | PRV | Play| NXT |     |        |
// |          |          |          |          |    |         |   |       | MUTE| VOL-| VOL+|     |        |
//                                              |     |     |     |       |     |
                        bindings = <
   &rgb_ug RGB_BRI &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_EFF &none &rgb_ug RGB_TOG    &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &bt BT_CLR
   &rgb_ug RGB_BRD &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_EFR &none &none              &none        &kp C_PREV   &kp C_PP     &kp C_NEXT        &none        &none
   &sys_reset      &none           &none           &none           &none &none              &none        &kp C_MUTE   &kp C_VOL_DN &kp C_VOL_UP      &none        &none
                                                             &trans      &trans       &trans        &trans      &trans
                        >;
                };
        };
};
